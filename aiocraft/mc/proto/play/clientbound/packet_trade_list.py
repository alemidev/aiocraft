"""[!] This file is autogenerated"""

from typing import Tuple, List, Dict, Union
from ....packet import Packet
from ....types import *

class PacketTradeList(Packet):
	__slots__ = ( 'id', 'experience', 'isRegularVillager', 'canRestock', 'windowId', 'trades', 'villagerLevel' )
	
	experience : int
	isRegularVillager : bool
	canRestock : bool
	windowId : int
	trades : list
	villagerLevel : int

	_state : int = 3

	_ids : Dict[int, int] = {
		477 : 39,
		480 : 39,
		490 : 39,
		498 : 39,
		573 : 40,
		575 : 40,
		578 : 40,
		709 : 40,
		734 : 39,
		735 : 39,
		736 : 39,
		751 : 38,
		755 : 40,
		756 : 40,
		757 : 40,
		1073741839 : 39
	}
	_definitions : Dict[int, List[Tuple[str, Type]]] = {
		477 : [ ( 'windowId', VarInt ), ( 'trades', ArrayType(StructType(( 'inputItem1', Slot ), ( 'outputItem', Slot ), ( 'inputItem2', OptionalType(Slot, ) ), ( 'tradeDisabled', Boolean ), ( 'nbTradeUses', Int ), ( 'maximumNbTradeUses', Int ), ( 'xp', Int ), ( 'specialPrice', Int ), ( 'priceMultiplier', Float ), ), Byte, ) ), ( 'villagerLevel', VarInt ), ( 'experience', VarInt ), ( 'isRegularVillager', Boolean ) ],
		480 : [ ( 'windowId', VarInt ), ( 'trades', ArrayType(StructType(( 'inputItem1', Slot ), ( 'outputItem', Slot ), ( 'inputItem2', OptionalType(Slot, ) ), ( 'tradeDisabled', Boolean ), ( 'nbTradeUses', Int ), ( 'maximumNbTradeUses', Int ), ( 'xp', Int ), ( 'specialPrice', Int ), ( 'priceMultiplier', Float ), ), Byte, ) ), ( 'villagerLevel', VarInt ), ( 'experience', VarInt ), ( 'isRegularVillager', Boolean ) ],
		490 : [ ( 'windowId', VarInt ), ( 'trades', ArrayType(StructType(( 'inputItem1', Slot ), ( 'outputItem', Slot ), ( 'inputItem2', OptionalType(Slot, ) ), ( 'tradeDisabled', Boolean ), ( 'nbTradeUses', Int ), ( 'maximumNbTradeUses', Int ), ( 'xp', Int ), ( 'specialPrice', Int ), ( 'priceMultiplier', Float ), ), Byte, ) ), ( 'villagerLevel', VarInt ), ( 'experience', VarInt ), ( 'isRegularVillager', Boolean ), ( 'canRestock', Boolean ) ],
		498 : [ ( 'windowId', VarInt ), ( 'trades', ArrayType(StructType(( 'inputItem1', Slot ), ( 'outputItem', Slot ), ( 'inputItem2', OptionalType(Slot, ) ), ( 'tradeDisabled', Boolean ), ( 'nbTradeUses', Int ), ( 'maximumNbTradeUses', Int ), ( 'xp', Int ), ( 'specialPrice', Int ), ( 'priceMultiplier', Float ), ( 'demand', Int ), ), Byte, ) ), ( 'villagerLevel', VarInt ), ( 'experience', VarInt ), ( 'isRegularVillager', Boolean ), ( 'canRestock', Boolean ) ],
		573 : [ ( 'windowId', VarInt ), ( 'trades', ArrayType(StructType(( 'inputItem1', Slot ), ( 'outputItem', Slot ), ( 'inputItem2', OptionalType(Slot, ) ), ( 'tradeDisabled', Boolean ), ( 'nbTradeUses', Int ), ( 'maximumNbTradeUses', Int ), ( 'xp', Int ), ( 'specialPrice', Int ), ( 'priceMultiplier', Float ), ( 'demand', Int ), ), Byte, ) ), ( 'villagerLevel', VarInt ), ( 'experience', VarInt ), ( 'isRegularVillager', Boolean ), ( 'canRestock', Boolean ) ],
		575 : [ ( 'windowId', VarInt ), ( 'trades', ArrayType(StructType(( 'inputItem1', Slot ), ( 'outputItem', Slot ), ( 'inputItem2', OptionalType(Slot, ) ), ( 'tradeDisabled', Boolean ), ( 'nbTradeUses', Int ), ( 'maximumNbTradeUses', Int ), ( 'xp', Int ), ( 'specialPrice', Int ), ( 'priceMultiplier', Float ), ( 'demand', Int ), ), Byte, ) ), ( 'villagerLevel', VarInt ), ( 'experience', VarInt ), ( 'isRegularVillager', Boolean ), ( 'canRestock', Boolean ) ],
		578 : [ ( 'windowId', VarInt ), ( 'trades', ArrayType(StructType(( 'inputItem1', Slot ), ( 'outputItem', Slot ), ( 'inputItem2', OptionalType(Slot, ) ), ( 'tradeDisabled', Boolean ), ( 'nbTradeUses', Int ), ( 'maximumNbTradeUses', Int ), ( 'xp', Int ), ( 'specialPrice', Int ), ( 'priceMultiplier', Float ), ( 'demand', Int ), ), Byte, ) ), ( 'villagerLevel', VarInt ), ( 'experience', VarInt ), ( 'isRegularVillager', Boolean ), ( 'canRestock', Boolean ) ],
		709 : [ ( 'windowId', VarInt ), ( 'trades', ArrayType(StructType(( 'inputItem1', Slot ), ( 'outputItem', Slot ), ( 'inputItem2', OptionalType(Slot, ) ), ( 'tradeDisabled', Boolean ), ( 'nbTradeUses', Int ), ( 'maximumNbTradeUses', Int ), ( 'xp', Int ), ( 'specialPrice', Int ), ( 'priceMultiplier', Float ), ( 'demand', Int ), ), Byte, ) ), ( 'villagerLevel', VarInt ), ( 'experience', VarInt ), ( 'isRegularVillager', Boolean ), ( 'canRestock', Boolean ) ],
		734 : [ ( 'windowId', VarInt ), ( 'trades', ArrayType(StructType(( 'inputItem1', Slot ), ( 'outputItem', Slot ), ( 'inputItem2', OptionalType(Slot, ) ), ( 'tradeDisabled', Boolean ), ( 'nbTradeUses', Int ), ( 'maximumNbTradeUses', Int ), ( 'xp', Int ), ( 'specialPrice', Int ), ( 'priceMultiplier', Float ), ( 'demand', Int ), ), Byte, ) ), ( 'villagerLevel', VarInt ), ( 'experience', VarInt ), ( 'isRegularVillager', Boolean ), ( 'canRestock', Boolean ) ],
		735 : [ ( 'windowId', VarInt ), ( 'trades', ArrayType(StructType(( 'inputItem1', Slot ), ( 'outputItem', Slot ), ( 'inputItem2', OptionalType(Slot, ) ), ( 'tradeDisabled', Boolean ), ( 'nbTradeUses', Int ), ( 'maximumNbTradeUses', Int ), ( 'xp', Int ), ( 'specialPrice', Int ), ( 'priceMultiplier', Float ), ( 'demand', Int ), ), Byte, ) ), ( 'villagerLevel', VarInt ), ( 'experience', VarInt ), ( 'isRegularVillager', Boolean ), ( 'canRestock', Boolean ) ],
		736 : [ ( 'windowId', VarInt ), ( 'trades', ArrayType(StructType(( 'inputItem1', Slot ), ( 'outputItem', Slot ), ( 'inputItem2', OptionalType(Slot, ) ), ( 'tradeDisabled', Boolean ), ( 'nbTradeUses', Int ), ( 'maximumNbTradeUses', Int ), ( 'xp', Int ), ( 'specialPrice', Int ), ( 'priceMultiplier', Float ), ( 'demand', Int ), ), Byte, ) ), ( 'villagerLevel', VarInt ), ( 'experience', VarInt ), ( 'isRegularVillager', Boolean ), ( 'canRestock', Boolean ) ],
		751 : [ ( 'windowId', VarInt ), ( 'trades', ArrayType(StructType(( 'inputItem1', Slot ), ( 'outputItem', Slot ), ( 'inputItem2', OptionalType(Slot, ) ), ( 'tradeDisabled', Boolean ), ( 'nbTradeUses', Int ), ( 'maximumNbTradeUses', Int ), ( 'xp', Int ), ( 'specialPrice', Int ), ( 'priceMultiplier', Float ), ( 'demand', Int ), ), Byte, ) ), ( 'villagerLevel', VarInt ), ( 'experience', VarInt ), ( 'isRegularVillager', Boolean ), ( 'canRestock', Boolean ) ],
		755 : [ ( 'windowId', VarInt ), ( 'trades', ArrayType(StructType(( 'inputItem1', Slot ), ( 'outputItem', Slot ), ( 'inputItem2', OptionalType(Slot, ) ), ( 'tradeDisabled', Boolean ), ( 'nbTradeUses', Int ), ( 'maximumNbTradeUses', Int ), ( 'xp', Int ), ( 'specialPrice', Int ), ( 'priceMultiplier', Float ), ( 'demand', Int ), ), Byte, ) ), ( 'villagerLevel', VarInt ), ( 'experience', VarInt ), ( 'isRegularVillager', Boolean ), ( 'canRestock', Boolean ) ],
		756 : [ ( 'windowId', VarInt ), ( 'trades', ArrayType(StructType(( 'inputItem1', Slot ), ( 'outputItem', Slot ), ( 'inputItem2', OptionalType(Slot, ) ), ( 'tradeDisabled', Boolean ), ( 'nbTradeUses', Int ), ( 'maximumNbTradeUses', Int ), ( 'xp', Int ), ( 'specialPrice', Int ), ( 'priceMultiplier', Float ), ( 'demand', Int ), ), Byte, ) ), ( 'villagerLevel', VarInt ), ( 'experience', VarInt ), ( 'isRegularVillager', Boolean ), ( 'canRestock', Boolean ) ],
		757 : [ ( 'windowId', VarInt ), ( 'trades', ArrayType(StructType(( 'inputItem1', Slot ), ( 'outputItem', Slot ), ( 'inputItem2', OptionalType(Slot, ) ), ( 'tradeDisabled', Boolean ), ( 'nbTradeUses', Int ), ( 'maximumNbTradeUses', Int ), ( 'xp', Int ), ( 'specialPrice', Int ), ( 'priceMultiplier', Float ), ( 'demand', Int ), ), Byte, ) ), ( 'villagerLevel', VarInt ), ( 'experience', VarInt ), ( 'isRegularVillager', Boolean ), ( 'canRestock', Boolean ) ],
		1073741839 : [ ( 'windowId', VarInt ), ( 'trades', ArrayType(StructType(( 'inputItem1', Slot ), ( 'outputItem', Slot ), ( 'inputItem2', OptionalType(Slot, ) ), ( 'tradeDisabled', Boolean ), ( 'nbTradeUses', Int ), ( 'maximumNbTradeUses', Int ), ( 'xp', Int ), ( 'specialPrice', Int ), ( 'priceMultiplier', Float ), ( 'demand', Int ), ), Byte, ) ), ( 'villagerLevel', VarInt ), ( 'experience', VarInt ), ( 'isRegularVillager', Boolean ), ( 'canRestock', Boolean ) ]
	}
